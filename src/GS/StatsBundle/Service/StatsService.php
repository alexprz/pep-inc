<?php

namespace GS\StatsBundle\Service;

use Doctrine\ORM\EntityManager;

/**
 * MailRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class StatsService
{
    private $_em;
    private $start;
    private $end;

    public function __construct(EntityManager $em)
    {
        $this->_em = $em;
        $this->start = null;
        $this->end = null;
    }

    public function setStartDate($date)
    {
        $this->start = clone $date;
    }

    public function setEndDate($date)
    {
        $this->end = clone $date;
    }

    public function addTimeWindowConstraint($qb, $varToConstraint, $start = null, $end = null)
    {
        $newStart = $this->start;
        $newEnd = $this->end;

        if($start != null)
            $newStart = $start;
        if($end != null)
            $newEnd = $end;

        if($newStart == null && $newEnd == null)
            return $qb;
        if($newStart != null){
            $qb->andWhere($varToConstraint.' >= :start');
            $qb->setParameter('start', $newStart);
        }
        if($newEnd != null){
            $qb->andWhere($varToConstraint.' <= :end');
            $qb->setParameter('end', $newEnd);
        }
        return $qb;
    }

    public function nbSentProspeMails()
    {
        $qb = $this->_em->createQueryBuilder();

        $qb->select('count(prospeMail.id)')
            ->from('GSMailerBundle:ProspeMail','prospeMail')
            ->leftJoin('prospeMail.mail', 'mail')
            ->where('mail.sentDate IS NOT NULL')
        ;

        $qb = $this->addTimeWindowConstraint($qb, 'mail.sentDate');

        return $qb->getQuery()->getSingleScalarResult();
    }

    public function nbScheduledProspeMails()
    {
        $qb = $this->_em->createQueryBuilder();

        $qb->select('count(prospeMail.id)')
            ->from('GSMailerBundle:ProspeMail','prospeMail')
            ->leftJoin('prospeMail.mail', 'mail')
            ->where('mail.scheduledDate IS NOT NULL AND mail.sentDate IS NULL')
        ;

        return $qb->getQuery()->getSingleScalarResult();
    }

    public function nbSentAndScheduledProspeMails()
    {
        $qb = $this->_em->createQueryBuilder();

        $qb->select('count(prospeMail.id)')
            ->from('GSMailerBundle:ProspeMail','prospeMail')
            ->leftJoin('prospeMail.mail', 'mail')
            ->where('mail.scheduledDate IS NOT NULL AND mail.sentDate IS NOT NULL')
        ;

        $qb = $this->addTimeWindowConstraint($qb, 'mail.sentDate');

        return $qb->getQuery()->getSingleScalarResult();
    }

    public function getDateDistributionProspeMail()
    {
        $qb = $this->_em->createQueryBuilder();

        $qb->select('count(prospeMail.id), CAST(mail.sentDate AS DATE) AS sentDate')
            ->from('GSMailerBundle:ProspeMail','prospeMail')
            ->leftJoin('prospeMail.mail', 'mail')
            // ->addSelect('MONTH(mail.sentDate) AS sentDate')
            ->groupBy('sentDate')
            // ->groupBy('CAST(mail.sentDate AS DATE)')
            // ->groupBy('datepart(MONTH, mail.sentDate)')
            // ->where('mail.scheduledDate IS NOT NULL AND mail.sentDate IS NOT NULL')
        ;

        $qb = $this->addTimeWindowConstraint($qb, 'mail.sentDate');

        return $qb->getQuery()->getResult();

    }

    public function getSpecDistributionProspeMail()
    {
        $qb = $this->_em->createQueryBuilder();

        $qb->select('spec.name')
            ->from('GSMailerBundle:ProspeMail','prospeMail')
            // ->leftJoin('prospeMail.mail', 'mail')
            ->leftJoin('prospeMail.specialization', 'spec')
            // ->addSelect('MONTH(mail.sentDate) AS sentDate')
            // ->groupBy('spec.name')
            // ->groupBy('CAST(mail.sentDate AS DATE)')
            // ->groupBy('datepart(MONTH, mail.sentDate)')
            // ->where('mail.scheduledDate IS NOT NULL AND mail.sentDate IS NOT NULL')
        ;

        // $qb = $this->addTimeWindowConstraint($qb, 'mail.sentDate');

        return $qb->getQuery()->getResult();
    }

}
